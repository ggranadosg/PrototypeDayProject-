library(shiny); runApp('pdcarrosusados04.R')
runApp('pdcarrosusados04.R')
runApp('pdcarrosusados04.R')
runApp('pdcarrosusados04.R')
runApp('pdcarrosusados04.R')
runApp('pdcarrosusados03.R')
runApp('pdcarrosusados03.R')
runApp('pdcarrosusados03.R')
library(tidyverse)
carros_usados <- read.csv("D:/BajadoEnD/20231218Módulo05Estadística&ProgramaciónConR/PrototypeDay/carrosusados.csv")
carros_usados_limpio <- carros_usados %>%
# Eliminar filas duplicadas
distinct() %>%
# Eliminar filas con valores NA en columnas clave
drop_na(c("manufacturer", "model", "year", "mileage", "price")) %>%
# Convertir año a formato numérico y filtrar años razonables
mutate(year = as.numeric(year),
year = ifelse(year >= 1980 & year <= as.numeric(format(Sys.Date(), "%Y")), year, NA)) %>%
drop_na(year) %>%
# Ajustar tipos de datos
mutate(mileage = as.numeric(mileage),
price = as.numeric(price),
accidents_or_damage = as.logical(accidents_or_damage),
one_owner = as.logical(one_owner),
personal_use_only = as.logical(personal_use_only)) %>%
# Lidiar con valores faltantes o NA en 'seller_rating' y 'driver_rating'
mutate(seller_rating = ifelse(is.na(seller_rating), mean(seller_rating, na.rm = TRUE), seller_rating),
driver_rating = ifelse(is.na(driver_rating), mean(driver_rating, na.rm = TRUE), driver_rating))
carros_usados_limpio <- carros_usados_limpio %>%
select(-seller_name, -driver_rating, -driver_reviews_num)
carros_usados_limpio <- carros_usados_limpio %>%
mutate_if(is.character, as.factor)
carros_usados_limpio <- head(carros_usados_limpio,1000)
correlaciones <- cor(carros_usados_limpio %>% select_if(is.numeric), use = "complete.obs")
correlaciones_con_precio <- correlaciones["price",]
print(correlaciones_con_precio)
print(sort(abs(correlaciones_con_precio), decreasing = TRUE))
ggplot(data = carros_usados_limpio, aes(x = mileage, y = price)) +
geom_point(aes(color = factor(accidents_or_damage))) + # Ejemplo de cómo añadir una tercera variable
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Relación entre Precio y Mileagen",
x = "Mileage",
y = "Precio") +
theme_minimal()
ggplot(data = carros_usados_limpio, aes(x = mileage, y = price)) +
geom_point(aes(color = factor(accidents_or_damage))) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Relación entre Precio y Kilometraje",
x = "Kilometraje",
y = "Precio") +
theme_minimal() +
coord_cartesian(ylim = c(500, 100000)) # Ajusta la vista del eje Y sin eliminar datos
ggplot(carros_usados_limpio, aes(x = mileage, y = price)) +
#geom_point(aes(color = exterior_color), alpha = 0.5) + # Añadimos color para diferenciar por color exterior
geom_smooth(method = "lm", color = "blue", se = FALSE) + # Línea de tendencia
labs(title = "Precio vs Kilometraje",
x = "Kilometraje",
y = "Precio") +
theme_minimal()
ggplot(carros_usados_limpio, aes(x = year, y = price)) +
geom_point(aes(color = fuel_type), alpha = 0.5) + # Diferenciamos por tipo de combustible
geom_smooth(method = "lm", color = "red", se = FALSE) + # Línea de tendencia
labs(title = "Precio vs Año del Modelo",
x = "Año del Modelo",
y = "Precio") +
theme_minimal()
runApp('pdcarrosusados03.R')
runApp('pdcarrosusados04.R')
runApp('pdcarrosusados04.R')
runApp('pdcarrosusados04.R')
runApp('pdcarrosusados05.R')
runApp('pdcarrosusados05.R')
runApp('pdcarrosusados05.R')
runApp('pdcarrosusados05.R')
